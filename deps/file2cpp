#!/bin/bash

# bail if we try and use an unset var
set -o nounset


SCRIPTDIR=$( dirname "$(readlink -f "$0")" )
SCRIPTDIR="$(unset CDPATH && cd "$SCRIPTDIR" && pwd)"

# Formatting for comamnds - standardised.
[ -v ECODE ] || readonly ECODE=$(printf "\e")
[ -v CODE_S ] || readonly CODE_S="$ECODE[32m"
[ -v CODE_E ] || readonly CODE_E="$ECODE[0m"
#------------------------------------------------------------------------------------
# die MSG [EXITCODE] - show the message (red) and exit exitcode.
function die {
   echo " ">&2 ; echo -e "\e[31m\e[1m${1}\e[0m">&2  ; echo " ">&2
   EXITCODE=${2:-1}
   exit "$EXITCODE"
}

function showhelp {
cat <<EOF >&2
NAME
   file2cpp
       
SYNOPSIS
   ${CODE_S}file2cpp help${CODE_E}
      This help.
   
   ${CODE_S}file2cpp SOURCE DESTINATION${CODE_E}
      Create a cpp file at DESTINATION.cpp, which outputs SOURCE's contents.
   
DESCRIPTION
   Helper script for jpf.   
EOF
}


function main {
   [ "$#" -eq 2 ] || (showhelp && exit 1)
   args=("$@")

   SRC=${args[0]}
   DST=${args[1]}
   CNM=${DST##*/}
   SNM=${SRC##*/}

   [[ -f $SRC ]] || die "Source file does not exist: ${SRC}";
   [[ ! -f "${DST}.cpp" ]] || rm "${DST}.cpp"
   [[ ! -f "${DST}.h" ]] || rm "${DST}.h"
   
   echo "$SRC -> ${CNM}.cpp and ${CNM}.h"

   cat <<EOF >${DST}.cpp
// auto-generated cpp file.
// created from ${SRC}.

#include "${CNM}.h"

void replace(std::wstring & s,  const std::map<std::wstring,std::wstring> & replacerules)
{
    for (auto iter = replacerules.begin(); iter != replacerules.end(); ++iter)
        s = replacestring(s,iter->first,iter->second); 
}

/*static*/ bool ${CNM}::output(std::wstring path, const std::map<std::wstring,std::wstring> * replacerules)
{
   if (path.length()==0) return false;
   if (path[path.length()-1]!='/')
      path.push_back('/');
   std::wofstream os(path+getName());
   if (!os.is_open())
      return false;
   os << getStr(replacerules);
   os.close();
}

/*static*/ std::wstring ${CNM}::getName()
{
   return "${SNM}";
}

/*static*/ std::wstring getStr(const std::map<std::string,std::string> * replacerules)
{
   std::wstring s= 
EOF

echo -n "R(LITERAL\"">>${DST}.cpp
cat ${SRC}>>${DST}.cpp
echo "\"LITERAL);">>${DST}.cpp
cat <<EOF >>${DST}.cpp
   if (replacerules!=NULL)
      replace(s,*replacerules);
   return s;
}

// end of auto-generated cpp file.
EOF

cat <<EOF >${DST}.h
#ifndef __${CNM}__H
#define __${CNM}__H

#include <string>

class ${CNM}
{
   public:
      static bool output(std::wstring path, const std::map<std::wstring,std::wstring> * replacerules = NULL); // recreate output file. 
      static std::wstring getStr(const std::map<std::wstring,std::wstring> * replacerules = NULL);  // contents of output file, with replacements as per rules.
      static std::wstring getName(); // output file name.
};

#endif
EOF
} # main

main "$@"
