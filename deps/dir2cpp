#!/bin/bash

# bail if we try and use an unset var
set -o nounset


SCRIPTDIR=$( dirname "$(readlink -f "$0")" )
SCRIPTDIR="$(unset CDPATH && cd "$SCRIPTDIR" && pwd)"

# Formatting for comamnds - standardised.
[ -v ECODE ] || readonly ECODE=$(printf "\e")
[ -v CODE_S ] || readonly CODE_S="$ECODE[32m"
[ -v CODE_E ] || readonly CODE_E="$ECODE[0m"
#------------------------------------------------------------------------------------
# die MSG [EXITCODE] - show the message (red) and exit exitcode.
function die {
   echo " ">&2 ; echo -e "\e[31m\e[1m${1}\e[0m">&2  ; echo " ">&2
   EXITCODE=${2:-1}
   exit "$EXITCODE"
}

function showhelp {
cat <<EOF >&2
NAME
   dir2cpp
       
SYNOPSIS
   ${CODE_S}dir2cpp help${CODE_E}
      This help.
   
   ${CODE_S}dir2cpp SOURCE DESTINATION${CODE_E}
      Create a cpp file at DESTINATION.cpp, which outputs SOURCE's contents.
   
DESCRIPTION
   Helper script for jpf.   
EOF
}


function main {
   [ "$#" -eq 2 ] || (showhelp && exit 1)
   args=("$@")

   SRC=${args[0]}
   SRC=$(echo "$SRC" | sed 's:/*$::')   # remove trailing slash, if it exists.

   DST=${args[1]}
   CNM=${DST##*/}
   SNM=${SRC##*/}

   [[ -d $SRC ]] || die "Source directory does not exist: ${SRC}";
   [[ ! -f "${DST}.cpp" ]] || rm "${DST}.cpp"
   [[ ! -f "${DST}.h" ]] || rm "${DST}.h"
   
   #echo "$SRC -> ${CNM}.cpp and ${CNM}.h"

   #-------------------------------------------------------------------------

cat <<EOF >${DST}.h
#ifndef __${CNM}__H
#define __${CNM}__H

#include <string>

class ${CNM}
{
    public:
        static bool output(std::string path); // recreate output files. Path needs to end in /

    private:
EOF

for filename in ${SRC}/*; do
    [ -e "$filename" ] || continue
    basename=${filename##*/}
    happyname=${basename//[^[:alnum:]]/_}
    echo "   static bool output_${happyname}(std::string path);" >>${DST}.h
done

cat <<EOF >>${DST}.h
};

#endif
EOF

#----------------------------------------------------------------------------------------------------

cat <<EOF >${DST}.cpp
// auto-generated cpp file.
// created from files in ${SRC}.

#include <string>
#include <fstream>

#include "${CNM}.h"

/*static*/ bool ${CNM}::output(std::string path)
{
EOF

for filename in ${SRC}/*; do
    [ -e "$filename" ] || continue
    basename=${filename##*/}
    happyname=${basename//[^[:alnum:]]/_}
    echo "   if (!output_${happyname}(path)) return false;" >>${DST}.cpp
done

cat <<EOF >>${DST}.cpp
    return true;
}

// end of auto-generated cpp file.
EOF


for filename in ${SRC}/*; do
    [ -e "$filename" ] || continue
    basename=${filename##*/}
    happyname=${basename//[^[:alnum:]]/_}

cat <<EOF >>${DST}.cpp


// -----------------------------------------------------------------------------------------------------------
//                                   ${basename}
//

/*static*/ bool ${CNM}::output_${happyname}(std::string path)
{
    if (path.length()==0) return false;
    if (path[path.length()-1]!='/')
        path.push_back('/');
   std::wofstream os(path+std::string("${basename}"));
   if (!os.is_open())
      return false;

   os << 
EOF

    echo -n "R\"LITERAL(">>${DST}.cpp
    cat ${filename}>>${DST}.cpp
    echo ")LITERAL\";">>${DST}.cpp

cat <<EOF >>${DST}.cpp

   os.close();
   return true;
}
// -----------------------------------------------------------------------------------------------------------



EOF
done


} # main

main "$@"
